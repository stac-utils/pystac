{
    "catalog.CatalogBench.time_catalog_from_dict": {
        "code": "class CatalogBench:\n    def time_catalog_from_dict(self) -> None:\n        \"\"\"Deserialize an Item from dictionary.\"\"\"\n        _ = pystac.Catalog.from_dict(self.catalog_dict)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.catalog_path = get_data_path(\"examples/1.0.0/catalog.json\")\n        with open(self.catalog_path) as src:\n            self.catalog_dict = json.load(src)\n        self.catalog = pystac.Catalog.from_file(self.catalog_path)",
        "min_run_count": 2,
        "name": "catalog.CatalogBench.time_catalog_from_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9559fc7cf6f051c8e80345ba8a33b72378a69db7da23d097427ebb840fd9d266",
        "warmup_time": -1
    },
    "catalog.CatalogBench.time_catalog_from_file": {
        "code": "class CatalogBench:\n    def time_catalog_from_file(self) -> None:\n        \"\"\"Deserialize an Item from file\"\"\"\n        _ = pystac.Catalog.from_file(self.catalog_path)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.catalog_path = get_data_path(\"examples/1.0.0/catalog.json\")\n        with open(self.catalog_path) as src:\n            self.catalog_dict = json.load(src)\n        self.catalog = pystac.Catalog.from_file(self.catalog_path)",
        "min_run_count": 2,
        "name": "catalog.CatalogBench.time_catalog_from_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9e776f7c4fc3f48da9d0a63f4ada86b4ced88ec9c731e5a16b6250cbd05a32a8",
        "warmup_time": -1
    },
    "catalog.CatalogBench.time_catalog_save": {
        "code": "class CatalogBench:\n    def time_catalog_save(self) -> None:\n        \"\"\"Serialize an Item to a JSON file.\"\"\"\n        self.catalog.save_object(\n            include_self_link=True,\n            dest_href=os.path.join(self.temp_dir, \"time_catalog_save.json\"),\n            stac_io=self.stac_io,\n        )\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.catalog_path = get_data_path(\"examples/1.0.0/catalog.json\")\n        with open(self.catalog_path) as src:\n            self.catalog_dict = json.load(src)\n        self.catalog = pystac.Catalog.from_file(self.catalog_path)",
        "min_run_count": 2,
        "name": "catalog.CatalogBench.time_catalog_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d514f879577f425743a2b18d2c8a8134cee99e7f2bf58cef9898ec569801a302",
        "warmup_time": -1
    },
    "catalog.CatalogBench.time_catalog_to_dict": {
        "code": "class CatalogBench:\n    def time_catalog_to_dict(self) -> None:\n        \"\"\"Serialize an Item to a dictionary.\"\"\"\n        self.catalog.to_dict(include_self_link=True)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.catalog_path = get_data_path(\"examples/1.0.0/catalog.json\")\n        with open(self.catalog_path) as src:\n            self.catalog_dict = json.load(src)\n        self.catalog = pystac.Catalog.from_file(self.catalog_path)",
        "min_run_count": 2,
        "name": "catalog.CatalogBench.time_catalog_to_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5d5e1f6c34a40a7f7023655638e26993c25137a9985b729c2af50da9f869279d",
        "warmup_time": -1
    },
    "collection.CollectionBench.time_collection_from_dict": {
        "code": "class CollectionBench:\n    def time_collection_from_dict(self) -> None:\n        \"\"\"Deserialize an Item from dictionary.\"\"\"\n        _ = pystac.Collection.from_dict(self.collection_dict)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.collection_path = get_data_path(\"examples/1.0.0/collection.json\")\n        with open(self.collection_path) as src:\n            self.collection_dict = json.load(src)\n        self.collection = pystac.Collection.from_file(self.collection_path)",
        "min_run_count": 2,
        "name": "collection.CollectionBench.time_collection_from_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f9f07c5e88a3f11d34d8021a6cf150022a07ecca6b59ea795a03e7ed96dd8853",
        "warmup_time": -1
    },
    "collection.CollectionBench.time_collection_from_file": {
        "code": "class CollectionBench:\n    def time_collection_from_file(self) -> None:\n        \"\"\"Deserialize an Item from file\"\"\"\n        _ = pystac.Collection.from_file(self.collection_path)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.collection_path = get_data_path(\"examples/1.0.0/collection.json\")\n        with open(self.collection_path) as src:\n            self.collection_dict = json.load(src)\n        self.collection = pystac.Collection.from_file(self.collection_path)",
        "min_run_count": 2,
        "name": "collection.CollectionBench.time_collection_from_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "40fc5bf39d0af406e4ae3fe4fe3a8990f1166e47c6c785a7ba970471f579a102",
        "warmup_time": -1
    },
    "collection.CollectionBench.time_collection_save": {
        "code": "class CollectionBench:\n    def time_collection_save(self) -> None:\n        \"\"\"Serialize an Item to a JSON file.\"\"\"\n        self.collection.save_object(\n            include_self_link=True,\n            dest_href=os.path.join(self.temp_dir, \"time_collection_save.json\"),\n            stac_io=self.stac_io,\n        )\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.collection_path = get_data_path(\"examples/1.0.0/collection.json\")\n        with open(self.collection_path) as src:\n            self.collection_dict = json.load(src)\n        self.collection = pystac.Collection.from_file(self.collection_path)",
        "min_run_count": 2,
        "name": "collection.CollectionBench.time_collection_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b565efa4806f64023b7a64961a2ad1deceb63e876c5783830c8dd607950460e6",
        "warmup_time": -1
    },
    "collection.CollectionBench.time_collection_to_dict": {
        "code": "class CollectionBench:\n    def time_collection_to_dict(self) -> None:\n        \"\"\"Serialize an Item to a dictionary.\"\"\"\n        self.collection.to_dict(include_self_link=True)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.collection_path = get_data_path(\"examples/1.0.0/collection.json\")\n        with open(self.collection_path) as src:\n            self.collection_dict = json.load(src)\n        self.collection = pystac.Collection.from_file(self.collection_path)",
        "min_run_count": 2,
        "name": "collection.CollectionBench.time_collection_to_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9beb8d54650e6aea1863509b1c13e49ce0712b14ac99f5813a077ee899d6f3bb",
        "warmup_time": -1
    },
    "collection.ExtentBench.peakmem_extent_from_items": {
        "code": "class ExtentBench:\n    def peakmem_extent_from_items(self) -> None:\n        _ = pystac.Extent.from_items(self.items_gen(self.catalog))\n\n    def setup(self) -> None:\n        # Walk the Test Case 4 catalog to get all of the items\n        self.catalog = pystac.Catalog.from_file(get_data_path(\"catalogs/test-case-4/catalog.json\"))\n        self.items_list = list(self.items_gen(self.catalog))",
        "name": "collection.ExtentBench.peakmem_extent_from_items",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "e9e6e4373ac65c9f8e7d462e25ad4a91d6681ad515da8e007c6622874a2d2919"
    },
    "collection.ExtentBench.time_extent_from_items": {
        "code": "class ExtentBench:\n    def time_extent_from_items(self) -> None:\n        _ = pystac.Extent.from_items(self.items_list)\n\n    def setup(self) -> None:\n        # Walk the Test Case 4 catalog to get all of the items\n        self.catalog = pystac.Catalog.from_file(get_data_path(\"catalogs/test-case-4/catalog.json\"))\n        self.items_list = list(self.items_gen(self.catalog))",
        "min_run_count": 2,
        "name": "collection.ExtentBench.time_extent_from_items",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5179ff8d6d927b4d78961af034990995f0f292a623c4ae8e2e4f83470a845511",
        "warmup_time": -1
    },
    "import_pystac.ImportPySTACBench.time_import_pystac": {
        "code": "class ImportPySTACBench:\n    def time_import_pystac(self) -> None:\n        self._import_pystac()\n\n    def setup(self, *args: Any, **kwargs: Any) -> None:\n        def import_pystac() -> None:\n            import pystac  # noqa: F401\n    \n        self._import_pystac = import_pystac",
        "min_run_count": 2,
        "name": "import_pystac.ImportPySTACBench.time_import_pystac",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 10,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "34778b447d0bc786ffd490fd099d7f9b217ac85e35af3517161fb06ce46186f2",
        "warmup_time": -1
    },
    "item.ItemBench.time_item_from_dict": {
        "code": "class ItemBench:\n    def time_item_from_dict(self) -> None:\n        \"\"\"Deserialize an Item from dictionary.\"\"\"\n        _ = pystac.Item.from_dict(self.item_dict)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.item_path = get_data_path(\"item/sample-item-asset-properties.json\")\n        with open(self.item_path) as src:\n            self.item_dict = json.load(src)\n        self.item = pystac.Item.from_file(self.item_path)",
        "min_run_count": 2,
        "name": "item.ItemBench.time_item_from_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b1f1a7116d4ff6c962f0698a3fb21f1ea7fb5bd6fedfd8e2e79b69ca027b4032",
        "warmup_time": -1
    },
    "item.ItemBench.time_item_from_file": {
        "code": "class ItemBench:\n    def time_item_from_file(self) -> None:\n        \"\"\"Deserialize an Item from file\"\"\"\n        _ = pystac.Item.from_file(self.item_path)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.item_path = get_data_path(\"item/sample-item-asset-properties.json\")\n        with open(self.item_path) as src:\n            self.item_dict = json.load(src)\n        self.item = pystac.Item.from_file(self.item_path)",
        "min_run_count": 2,
        "name": "item.ItemBench.time_item_from_file",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "563c5cd12fc17824faa90cb10705f8640dba3b46da7f9e9f522772f1cc0517b6",
        "warmup_time": -1
    },
    "item.ItemBench.time_item_save": {
        "code": "class ItemBench:\n    def time_item_save(self) -> None:\n        \"\"\"Serialize an Item to a JSON file.\"\"\"\n        self.item.save_object(\n            include_self_link=True,\n            dest_href=os.path.join(self.temp_dir, \"time_item_save.json\"),\n            stac_io=self.stac_io,\n        )\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.item_path = get_data_path(\"item/sample-item-asset-properties.json\")\n        with open(self.item_path) as src:\n            self.item_dict = json.load(src)\n        self.item = pystac.Item.from_file(self.item_path)",
        "min_run_count": 2,
        "name": "item.ItemBench.time_item_save",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f4ad5257226359032d0544d33c36130328c17655b6b764082c743fdb68b3c327",
        "warmup_time": -1
    },
    "item.ItemBench.time_item_to_dict": {
        "code": "class ItemBench:\n    def time_item_to_dict(self) -> None:\n        \"\"\"Serialize an Item to a dictionary.\"\"\"\n        self.item.to_dict(include_self_link=True)\n\n    def setup(self) -> None:\n        self.temp_dir = tempfile.mkdtemp()\n    \n        self.stac_io = pystac.StacIO.default()\n    \n        self.item_path = get_data_path(\"item/sample-item-asset-properties.json\")\n        with open(self.item_path) as src:\n            self.item_dict = json.load(src)\n        self.item = pystac.Item.from_file(self.item_path)",
        "min_run_count": 2,
        "name": "item.ItemBench.time_item_to_dict",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 4,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3c54cd4f525ecf9fee88b1a04853a40555f98588f75c21a7129d4f07910a94d9",
        "warmup_time": -1
    },
    "version": 2
}